#!/usr/bin/env python

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('WebKit', '3.0')
from gi.repository import Gio, Gtk, Gdk, GObject, WebKit
import json
import time
import datetime

class MenuToolButton(Gtk.ToolButton):
    def __init__(self, text):
        Gtk.ToolButton.__init__(self, Gtk.STOCK_EXECUTE)
        self.set_label(text)
        self.connect("clicked", self.onClicked)

    def set_popup(self, menu):
        self.menu = menu

    def onClicked(self, widget):
        x, y, w, h = self.getScreenCoordinates()
        self.menu.popup(None, None, lambda menu, data: (x, y+h, True), None, 1, 0)
                
    def getScreenCoordinates(self):
        parent = self.get_parent_window()
        x, y = parent.get_root_origin()
        w = parent.get_width()
        h = parent.get_height()
        extents = parent.get_frame_extents()
        allocation = self.get_allocation()
        return (x + (extents.width-w)/2 + allocation.x,
                y + (extents.height-h)-(extents.width-w)/2 + allocation.y,
                allocation.width,
                allocation.height)
                
class ThemeEmulator:
    def closeApplication(self, widget):
        Gtk.main_quit()

    def __init__(self):
        self.window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
        self.window.connect("destroy", self.closeApplication)
        self.window.set_title("MDM Theme Emulator")
        
        self.userName = None
        
        self.sensitiveItems = []
        self.toolbar = self.createToolbar()
        for item in self.sensitiveItems:
            item.set_sensitive(False)

        self.scrolledWindow = Gtk.ScrolledWindow()
        self.scrolledWindow.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        
        self.webView = WebKit.WebView()
        settings = self.webView.get_settings()
        settings.set_property('enable-default-context-menu', False)
        self.webView.set_settings(settings)

        self.scrolledWindow.add(self.webView)
        self.scrolledWindow.show()

        vbox = Gtk.VBox(False, 2)
        vbox.pack_start(self.toolbar, False, False, 0)
        vbox.add(self.scrolledWindow)
        self.statusLabel = Gtk.Label("")
        self.statusLabel.set_alignment(0, 0)
        vbox.pack_end(self.statusLabel, False, False, 0)
        self.window.add(vbox)
        self.window.show_all()
        self.setResolution(800, 600)
        
        self.webView.connect("load-finished", self.loadFinished)
        self.webView.connect("script-alert", self.onAlert)
        self.webView.connect("navigation-requested", self.navigationRequest);
        self.webView.connect("resource-request-starting", self.resourceRequestStarting);
        self.setStatus("Initialized")

        self.isFullscreen = False
        self.isLoaded = False
        self.isEnabled = True
        self.window.connect('window-state-event', self.onWindowStateChange)
        self.window.connect('motion-notify-event', self.onMotion)
        self.window.connect("key-press-event", self.onWindowKeyPress)
        
        GObject.timeout_add(1000, self.updateTime, None)
        
        
    def resourceRequestStarting(self, view, frame, resource, networkRequest, userdata):
        uri = networkRequest.get_uri()
        if not uri.startswith("file:"):
            networkRequest.set_uri("about:blank")
        
    def navigationRequest(self, view, frame, networkRequest):
        uri = networkRequest.get_uri()
        if not uri.startswith("file:"):
            return 1
        return 0
    
    def setTime(self):
        self.callJavascriptMethod("set_clock", time.strftime("%a %b %d, %H:%M"))
        
    def updateTime(self, *args):
        if self.isLoaded:
            self.setTime()

        time_til_next_min = 60 - datetime.datetime.now().second;
        if time_til_next_min < 0:
            time_til_next_min = 0

        GObject.timeout_add(time_til_next_min*1000, self.updateTime, None)
        return False

    def onWindowStateChange(self, window, event):
        self.isFullscreen = bool(Gdk.WindowState.FULLSCREEN & event.new_window_state)
        if self.isLoaded:
            self.resolutionCombo.set_sensitive(self.isFullscreen == False)
        if self.isFullscreen:
            self.toolbar.hide()
            self.statusLabel.hide()
        else:
            self.toolbar.show()
            self.statusLabel.show()

    def onMotion(self, window, event):
        if self.isFullscreen:
            if event.y < 2:
                self.toolbar.show()
            else:
                self.toolbar.hide()
            
            width, height = self.window.get_size()
            if event.y > height-2:
                self.statusLabel.show()
            else:
                self.statusLabel.hide()
        
    def onWindowKeyPress(self, widget, event):
        if event.keyval == Gdk.KEY_F11:
            if self.isFullscreen:
                self.window.unfullscreen()
            else:
                self.window.fullscreen()
        elif event.keyval == Gdk.KEY_Escape and self.isFullscreen:
            self.window.unfullscreen()
                
    def setStatus(self, string):
        self.statusLabel.set_text(string)
        
    def createToolbar(self):
        toolbar = Gtk.Toolbar()
        toolbar.set_style(Gtk.ToolbarStyle.TEXT)
        
        # Open
        button = Gtk.ToolButton(Gtk.STOCK_OPEN)
        button.connect('clicked', self.openFile)
        toolbar.add(button)
        
        # Refresh
        button = Gtk.ToolButton(Gtk.STOCK_REFRESH)
        button.connect('clicked', self.refresh)
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        # En/Disable
        self.disableButton = Gtk.ToolButton(Gtk.STOCK_YES)
        self.disableButton.set_label("Disable")
        self.disableButton.connect('clicked', self.enableDisable)
        self.sensitiveItems.append(self.disableButton)
        toolbar.add(self.disableButton)
        
        toolbar.add(Gtk.SeparatorToolItem())
        
        # Resolution
        name_store = Gtk.ListStore(str)
        name_store.append(["1920x1080"])
        name_store.append(["1024x768"])
        name_store.append(["800x600"])
        name_store.append(["640x480"])
        
        self.resolutionCombo = Gtk.ComboBox.new_with_model_and_entry(name_store)
        self.resolutionCombo.set_entry_text_column(0)
        self.resolutionCombo.connect('changed', self.resolutionChanged)
        entry = self.resolutionCombo.get_child()
        entry.connect("key-press-event", self.onResolutionKeyPress)
        entry.set_text("800x600")
        self.sensitiveItems.append(self.resolutionCombo)
        item = Gtk.ToolItem()
        item.add(self.resolutionCombo)
        toolbar.add(item)
        
        toolbar.add(Gtk.SeparatorToolItem())
        
        # Add menu button
        button = self.createAddMenuButton()
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        # Set menu button
        button = self.createSetMenuButton()
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        # Hide menu button
        button = self.createHideMenuButton()
        self.sensitiveItems.append(button)
        toolbar.add(button)
        
        return toolbar
        
    def createAddMenuButton(self):
        menu = Gtk.Menu()
        menu.append(self.createMenuItem('Dummies', self.addDummies))
        menu.append(self.createMenuItem('User', self.addUser))
        menu.append(self.createMenuItem('Session', self.addSession))
        menu.show_all()

        button = MenuToolButton(u"Add \u25BE")
        button.set_popup(menu)
        
        return button
        
    def createSetMenuButton(self):
        menu = Gtk.Menu()
        menu.append(self.createMenuItem('Welcome Message', self.onMenuJavascriptCallPrompt, "set_welcome_message"))
        menu.append(self.createMenuItem('Message', self.onMenuJavascriptCallPrompt, "mdm_msg"))
        menu.append(self.createMenuItem('Error Message', self.onMenuJavascriptCallPrompt, "mdm_error"))
        menu.append(self.createMenuItem('Timed Message', self.onMenuJavascriptCallPrompt, "mdm_timed"))
        menu.show_all()

        button = MenuToolButton(u"Set \u25BE")
        button.set_popup(menu)
        
        return button
        
    def createHideMenuButton(self):
        menu = Gtk.Menu()
        menu.append(self.createMenuItem('Shutdown', self.onMenuJavascriptCall, "mdm_hide_shutdown"))
        menu.append(self.createMenuItem('Suspend', self.onMenuJavascriptCall, "mdm_hide_suspend"))
        menu.append(self.createMenuItem('Restart', self.onMenuJavascriptCall, "mdm_hide_restart"))
        menu.append(self.createMenuItem('Quit', self.onMenuJavascriptCall, "mdm_hide_quit"))
        menu.append(self.createMenuItem('XDMCP', self.onMenuJavascriptCall, "mdm_hide_xdmcp"))
        menu.show_all()

        button = MenuToolButton(u"Hide \u25BE")
        button.set_popup(menu)
        
        return button

    def onMenuJavascriptCallPrompt(self, widget, name):
        text = self.dialogAskFor("Please supply a message", "Set", "Please enter a message for %s:" % widget.get_label())
        if text:
            self.callJavascriptMethod(name, text)
        
    def onMenuJavascriptCall(self, widget, name):
        self.callJavascriptMethod(name)
    
    def createMenuItem(self, text, callback, *params):
        item = Gtk.MenuItem(text)
        item.connect("activate", callback, *params)
        return item
        
    def enableDisable(self, widget):
        self.setEnabled(self.isEnabled == False)
    
    def setEnabled(self, enable):
        if self.isEnabled != enable:
            self.isEnabled = enable
            if enable:
                self.disableButton.set_label("Disable")
                self.callJavascriptMethod("mdm_enable")
            else:
                self.disableButton.set_label("Enable")
                self.callJavascriptMethod("mdm_disable")
        
    
    def resolutionChanged(self, widget):
        if widget.get_active_iter():
            self.setResolutionFromString(widget.get_child().get_text())
        
    def onResolutionKeyPress(self, widget, event):
        if event.keyval == Gdk.KEY_Return:
            self.setResolutionFromString(widget.get_text())
            
    def setResolutionFromString(self, string):
        data = string.split('x')
        if len(data) == 2:
            width, height = data
            self.setResolution(int(width), int(height))
            self.setStatus("Resolution changed to: " + string)
        else:
            self.setStatus("Wrong resolution format: " + string)

    def setResolution(self, width, height):
        self.window.unmaximize()
        self.scrolledWindow.set_size_request(width, height)
        self.window.resize(100,100) # force resize to minimum size
        
    def refresh(self, widget):
        self.userName = None
        self.webView.reload()
        self.setStatus("Reloading")
        
    def addDummies(self, widget):
        self.callJavascriptMethod("mdm_add_user", "Jake", "What's this ?")
        self.callJavascriptMethod("mdm_add_user", "Elwood", "What'?")
        self.callJavascriptMethod("mdm_add_session", "Cinnamon", "cinnamon.desktop")
        self.callJavascriptMethod("mdm_add_session", "Mate", "mate.desktop")
        self.callJavascriptMethod("mdm_add_session", "Gnome", "gnome3.desktop")
        self.setStatus("Added 2 dummy users and 3 dummy sessions")
        
    def addSession(self, widget):
        data = self.dialogAskFor("Add a new Session", "Add", "Please enter a session name:", "Please enter a desktop filename:")
        if data:
            name, filename = data
            if name != "" and filename != "":
                self.callJavascriptMethod("mdm_add_session", name, filename)
                self.setStatus("Added session: %s / %s" % (name, filename))
            else:
                self.setStatus("Add session failed due to empty field")
        
    def addUser(self, widget):
        data = self.dialogAskFor("Add a new User", "Add", "Please enter a user name:", "Please enter gecos:")
        if data:
            name, gecos = data
            if name != "" and gecos != "":
                self.callJavascriptMethod("mdm_add_user", name, gecos)
                self.setStatus("Added user: %s / %s" % (name, gecos))
            else:
                self.setStatus("Add user failed due to empty field")
        
    def dialogAskFor(self, title, okLabel, *labels):
        message = "test"
        dialogWindow = Gtk.Dialog(title, self.window,
                              Gtk.DialogFlags.MODAL | Gtk.DialogFlags.DESTROY_WITH_PARENT)
                              
        dialogWindow.add_button(okLabel, Gtk.ResponseType.OK)
        dialogWindow.add_button("Cancel", Gtk.ResponseType.CANCEL)
        dialogWindow.set_title(title)

        dialogBox = dialogWindow.get_content_area()
        
        vbox = Gtk.VBox()
            
        entries = []
        for label in labels:
            entry = Gtk.Entry()
            label = Gtk.Label(label)
            label.set_alignment(0, 0)
            vbox.add(label)
            vbox.add(entry)
            entries.append(entry)
        
        dialogBox.pack_end(vbox, False, False, 0)

        dialogWindow.show_all()
        response = dialogWindow.run()
        
        result = None
        if response == Gtk.ResponseType.OK:
            result = []
            for entry in entries:
                result.append(entry.get_text())
            
        dialogWindow.destroy()
        return result
        
    def openFile(self, widget):
        dialog = Gtk.FileChooserDialog("Please select an mdm theme", self.window,
            Gtk.FileChooserAction.OPEN,
            (Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL,
             Gtk.STOCK_OPEN, Gtk.ResponseType.OK))

        filter_text = Gtk.FileFilter()
        filter_text.set_name("HTML files")
        filter_text.add_mime_type("text/html")
        dialog.add_filter(filter_text)

        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            self.filename = dialog.get_filename()
            self.setStatus("Loading file: " + self.filename)
            self.webView.open(self.filename) 

        dialog.destroy()
        
    def loadFinished(self, *args):
        self.isLoaded = True
        self.setEnabled(True)
        self.userName = None
        if self.sensitiveItems:
            for item in self.sensitiveItems:
                item.set_sensitive(True)

        self.callJavascriptMethod("set_welcome_message", "Welcome to the MDM Theme Emulator")
        self.callJavascriptMethod("mdm_msg", "Please enter your username")
        self.setTime()
        
        self.setStatus("Load finished: " + self.filename)
        
    def onAlert(self, view, frame, message):
        data = message.split('###', 1)
        if len(data) == 2:
            action, param = data
            if action == "USER":
                self.userName = param
                self.callJavascriptMethod("mdm_noecho", 'Password:')
                self.setStatus("Selected user: " + param)
            elif action == "LOGIN":
                if self.userName:
                    self.setStatus("Logged in as %s, with password %s" % (self.userName, param))
                    self.userName = None
                    self.callJavascriptMethod("mdm_error", "Can't log in in emulator")
                    self.callJavascriptMethod("mdm_prompt", '')
                else:
                    self.userName = param
                    self.setStatus("Entered user: " + param)
                    self.callJavascriptMethod("mdm_noecho", 'Password:')
            elif action == "SESSION":
                self.setStatus("Session: " + param)
            elif action == "LANGUAGE":
                self.setStatus("Language")
            elif action == "SHUTDOWN":
                self.setStatus("Shutdown")
            elif action == "SUSPEND":
                self.setStatus("Suspend")
            elif action == "RESTART":
                self.setStatus("Restart")
            elif action == "QUIT":
                self.setStatus("Quit")
            elif action == "XDMCP":
                self.setStatus("Xdmcp")
            else:
                self.setStatus('Unrecognized action: ' + action)
            return 1
        
    def callJavascriptMethod(self, method, *arguments):
        jsonData = json.dumps(arguments)
        self.webView.execute_script(method + ".apply(null, " + jsonData + ");");

def main():
    Gtk.main()
    return 0       

if __name__ == "__main__":
    ThemeEmulator()
    main()
